// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum ClassStatus {
  SCHEDULED  // Class is scheduled but not yet paid for
  PENDING    // Class is paid for and pending teacher confirmation
  CONFIRMED
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  avatarUrl String?
  role      Role     @default(STUDENT)
  country   String?
  gender    String?

  students      Student[]      @relation("UserStudents")
  teachers      Teacher[]      @relation("UserTeachers")
  notifications Notification[]
  errorLogs     ErrorLog[]

  @@index([email])
}

model Student {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String    @db.Uuid
  user                   User      @relation("UserStudents", fields: [userId], references: [id])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  credits                Int       @default(0)
  customerId             String?
  priceId                String?
  hasAccess              Boolean   @default(false)
  packageName            String?
  packageExpiration      DateTime?
  portugueseLevel        String?
  learningGoals          String[]
  nativeLanguage         String?
  otherLanguages         String[]
  timeZone               String?
  hasCompletedOnboarding Boolean   @default(false)
  classes                Class[]

  @@index([userId])
}

model Teacher {
  id           String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String                @db.Uuid
  user         User                  @relation("UserTeachers", fields: [userId], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  biography    String?
  specialties  String[]
  languages    String[]
  classes      Class[]
  availability TeacherAvailability[]

  @@index([userId])
}

model TeacherAvailability {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teacherId      String   @db.Uuid
  teacher        Teacher  @relation(fields: [teacherId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  startDateTime  DateTime
  endDateTime    DateTime
  isAvailable    Boolean  @default(true)
  recurringRules Json?
  notes          String?

  @@index([teacherId])
}

model Class {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teacherId        String          @db.Uuid
  teacher          Teacher         @relation(fields: [teacherId], references: [id])
  studentId        String          @db.Uuid
  student          Student         @relation(fields: [studentId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  status           ClassStatus     @default(PENDING)
  startDateTime    DateTime
  endDateTime      DateTime
  duration         Int
  notes            String?
  feedback         String?
  rating           Int?
  recurringGroupId String?         @db.Uuid
  recurringGroup   RecurringGroup? @relation(fields: [recurringGroupId], references: [id])

  @@index([teacherId, studentId])
}

model RecurringGroup {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schedule    Json // e.g., {"pattern": "weekly", "days_of_week": [1, 3, 5]}
  occurrences Int
  endType     String
  endDate     DateTime?
  classes     Class[]

  @@index([endDate])
}

model Notification {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      String
  message   String
  metadata  Json?
  isRead    Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid

  @@index([userId])
}

model ErrorLog {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurredAt   DateTime  @default(now())
  userId       String?   @db.Uuid
  user         User?     @relation(fields: [userId], references: [id])
  errorMessage String
  errorStack   String?
  table        String
  operation    String

  @@index([userId])
}
