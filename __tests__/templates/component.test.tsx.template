import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';

// Mock dependencies before importing the component
jest.mock('@/path/to/dependency', () => ({
  DependencyComponent: () => <div data-testid="mocked-dependency">Mocked Content</div>
}));

jest.mock('@/contexts/user-context', () => {
  const mockUserContext = {
    user: { id: 'user-123' },
    profile: { id: 'profile-123' },
    isLoading: false,
    hasAccess: true,
    error: null,
    refetchUserData: jest.fn(),
  };
  
  return {
    useUser: jest.fn().mockReturnValue(mockUserContext),
    UserContext: React.createContext(mockUserContext),
    UserProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>,
    mockUserContext,
  };
});

// Import after setting up mocks
const { ComponentToTest } = require('@/path/to/component');
const { useUser, mockUserContext } = require('@/contexts/user-context');

describe('ComponentToTest', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const renderComponent = (props = {}, contextOverrides = {}) => {
    // Override context for this specific test
    if (Object.keys(contextOverrides).length > 0) {
      useUser.mockReturnValue({ ...mockUserContext, ...contextOverrides });
    }
    
    return render(<ComponentToTest {...props} />);
  };
  
  it('renders correctly', () => {
    renderComponent();
    expect(screen.getByTestId('component-to-test')).toBeInTheDocument();
  });

  it('shows loading state when data is loading', () => {
    renderComponent({}, { isLoading: true });
    expect(screen.getByTestId('loading-skeleton')).toBeInTheDocument();
  });

  it('shows error state when there is an error', () => {
    renderComponent({}, { error: new Error('Test error') });
    expect(screen.getByTestId('error-state')).toBeInTheDocument();
  });

  it('handles user interaction', () => {
    renderComponent();
    fireEvent.click(screen.getByRole('button'));
    // Add assertions for the expected behavior
  });
}); 